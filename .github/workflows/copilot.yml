# GitHub Copilot Project Configuration
# HillDevil Restaurant Management System

project:
    name: "HillDevil"
    description: "Full-stack restaurant management system with Spring Boot backend and React frontend"
    version: "1.0.0"
    repository: "https://github.com/your-org/hilldevil"
 
  # Technology Stack
  technologies:
    backend:
      language: "Java"
      version: "21"
      framework: "Spring Boot"
      framework_version: "3.5.6"
      build_tool: "Maven"
      build_tool_version: "3.8+"
      
      dependencies:
        - name: "Spring Security"
          purpose: "Authentication & Authorization with JWT"
        - name: "Spring Data JPA"
          purpose: "Database ORM with Hibernate"
        - name: "PostgreSQL Driver"
          purpose: "Database connectivity"
        - name: "MapStruct"
          version: "1.5.5"
          purpose: "DTO mapping"
        - name: "Jakarta Validation"
          purpose: "Request validation"
        - name: "OAuth2 Resource Server"
          purpose: "JWT token handling"
          
    frontend:
      language: "JavaScript"
      framework: "React.js"
      package_manager: "npm"
      
    database:
      type: "PostgreSQL"
      orm: "Hibernate 6.6.x"
      
  # Project Structure
  structure:
    backend:
      root: "/d:/FSOFT/Project/Backend/HillDevil/backend"
      source: "src/main/java/com/example/backend"
      
      layers:
        - name: "controller"
          description: "REST API endpoints"
          pattern: "**/*Controller.java"
          naming: "PascalCase with 'Controller' suffix"
          
        - name: "service"
          description: "Business logic layer"
          pattern: "**/*Service.java"
          naming: "PascalCase with 'Service' suffix"
          annotations:
            - "@Service"
            - "@Transactional (for write operations)"
            
        - name: "repository"
          description: "Data access layer"
          pattern: "**/*Repository.java"
          naming: "PascalCase with 'Repository' suffix"
          extends: "JpaRepository<Entity, UUID>"
          
        - name: "entities"
          description: "JPA entity models"
          pattern: "**/*.java"
          annotations:
            - "@Entity"
            - "@Table"
          primary_key_type: "UUID"
          
        - name: "dto"
          description: "Data Transfer Objects"
          subdirectories:
            - "request"
            - "response"
          naming: "PascalCase with 'Request/Response' suffix"
          
        - name: "mapper"
          description: "MapStruct mappers"
          pattern: "**/*Mapper.java"
          tool: "MapStruct"
          
        - name: "configuration"
          description: "Spring configuration classes"
          pattern: "**/*Config.java"
          
        - name: "exception"
          description: "Custom exceptions and handlers"
          files:
            - "AppException.java"
            - "ErrorCode.java (enum)"
            - "GlobalExceptionHandler.java"
            
    frontend:
      root: "/d:/FSOFT/Project/Backend/HillDevil/frontend"
      source: "src"
      
      directories:
        - name: "components"
          description: "Reusable UI components"
          naming: "PascalCase"
          
        - name: "pages"
          description: "Page-level components"
          naming: "PascalCase with 'Page' suffix"
          
        - name: "services"
          description: "API service calls"
          naming: "camelCase with 'Service' suffix"
          
        - name: "utils"
          description: "Helper functions"
          
        - name: "assets"
          description: "Static resources"
  
  # Code Conventions
  conventions:
    java:
      naming:
        classes: "PascalCase"
        methods: "camelCase"
        variables: "camelCase"
        constants: "UPPER_SNAKE_CASE"
        packages: "lowercase"
        
      patterns:
        architecture: "Layered (Controller → Service → Repository → Entity)"
        dto_usage: "Always use DTOs, never expose entities in controllers"
        transaction_management: "Use @Transactional on service methods that modify data"
        exception_handling: "Use custom AppException with ErrorCode enum"
        
      annotations:
        controllers:
          - "@RestController"
          - "@RequestMapping"
          - "@PreAuthorize (for security)"
        services:
          - "@Service"
          - "@Transactional"
        repositories:
          - "@Repository (optional, auto-detected)"
        entities:
          - "@Entity"
          - "@Table"
          - "@Id with @GeneratedValue(strategy = GenerationType.UUID)"
          
      security:
        authentication: "JWT-based with custom MyCustomJwtDecoder"
        authorization: "Role-based with @PreAuthorize"
        roles:
          - "OWNER"
          - "STAFF"
          - "CUSTOMER"
        jwt_claims:
          - "user_id (primary)"
          - "sub (fallback)"
          - "userId (fallback)"
          
      database:
        primary_key_type: "UUID"
        timestamp_type: "Instant"
        enum_storage: "STRING (@Enumerated(EnumType.STRING))"
        timestamps:
          - "@CreationTimestamp for createdAt"
          - "@UpdateTimestamp for updatedAt"
        relationships:
          fetch_type: "LAZY (default for @ManyToOne, @OneToMany)"
          
    javascript:
      naming:
        components: "PascalCase"
        functions: "camelCase"
        constants: "UPPER_SNAKE_CASE"
        files: "PascalCase for components, camelCase for services"
        
  # API Design
  api:
    base_path: "/api"
    versioning: "Not implemented yet (consider /api/v1)"
    
    response_format:
      success:
        code: "HTTP status code"
        message: "Success message"
        result: "Response data"
      error:
        code: "Error code from ErrorCode enum"
        message: "Error message"
        
    authentication:
      type: "Bearer Token (JWT)"
      header: "Authorization: Bearer {token}"
      
    endpoints:
      authentication:
        - path: "/api/auth/token"
          method: "POST"
          description: "Login and get access token"
          request: "AuthenticationRequest (email, password)"
          response: "AuthenticationResponse + refresh token cookie"
          
        - path: "/api/auth/refresh"
          method: "POST"
          description: "Refresh access token"
          request: "Refresh token from cookie"
          response: "RefreshResponse with new tokens"
          
        - path: "/api/auth/logout"
          method: "POST"
          description: "Logout and revoke tokens"
          
      tables:
        - path: "/api/owner/tables"
          method: "GET"
          description: "List tables with filters (paginated)"
          auth: "OWNER role required"
          query_params:
            - "branchId (UUID, optional)"
            - "areaId (UUID, optional)"
            - "status (String, optional)"
            - "minCapacity (Integer, optional)"
            - "page (int, default: 0)"
            - "size (int, default: 20)"
            - "sort (String, default: 'areaName,asc')"
            
        - path: "/api/owner/tables/{tableId}"
          method: "PUT"
          description: "Update table details"
          auth: "OWNER role required"
          request: "UpdateTableRequest"
          
    pagination:
      default_page: 0
      default_size: 20
      max_size: 100
      
    sorting:
      format: "property,direction"
      example: "areaName,desc"
      default: "areaName,asc"
  
  # Development Workflow
  development:
    backend:
      setup:
        - step: "Install Java 21"
        - step: "Install Maven 3.8+"
        - step: "Install PostgreSQL"
        - step: "Configure application.properties"
          details:
            - "spring.datasource.url"
            - "spring.datasource.username"
            - "spring.datasource.password"
            - "jwt.signerKey"
            
      commands:
        clean: "mvn clean"
        compile: "mvn compile"
        build: "mvn clean install"
        run: "mvn spring-boot:run"
        test: "mvn test"
        package: "mvn clean package -DskipTests"
        
      common_issues:
        - issue: "ClassNotFoundException"
          solution: "Run 'mvn clean install' or delete target/ folder"
          
        - issue: "JWT user_id claim is null"
          solution: "Check JWT token at jwt.io, verify claim names in controller"
          
        - issue: "Hibernate query errors"
          solution: "Verify DTO constructor order, check @Transactional annotation"
          
    frontend:
      setup:
        - step: "Install Node.js 16+"
        - step: "Install npm"
        - step: "Run 'npm install' in frontend directory"
        
      commands:
        install: "npm install"
        dev: "npm start"
        build: "npm run build"
        test: "npm test"
        
  # Testing Strategy
  testing:
    backend:
      types:
        - "Unit tests for service logic"
        - "Integration tests for repository queries"
        
      naming: "ClassNameTest.java (e.g., TableServiceTest.java)"
      
      frameworks:
        - "JUnit 5"
        - "AssertJ"
        - "Mockito"
        
    frontend:
      types:
        - "Unit tests for components"
        - "Integration tests for API calls"
        
      frameworks:
        - "Jest"
        - "React Testing Library"
  
  # Build & Deployment
  deployment:
    backend:
      build:
        command: "mvn clean package -DskipTests"
        artifact: "target/backend-{version}.jar"
        
      run:
        command: "java -jar target/backend-{version}.jar"
        
      environment_variables:
        - "JWT_SIGNER_KEY"
        - "DB_URL"
        - "DB_USERNAME"
        - "DB_PASSWORD"
        
    frontend:
      build:
        command: "npm run build"
        output: "build/"
        
      deploy:
        target: "Static web server (Nginx, Apache) or CDN"
        
      environment_variables:
        - "REACT_APP_API_URL"
  
  # Error Handling
  error_codes:
    format: "ErrorCode enum with code, message, and HTTP status"
    
    examples:
      - code: 1001
        name: "USER_EXISTED"
        status: "400 BAD_REQUEST"
        
      - code: 1004
        name: "UNAUTHENTICATED"
        status: "401 UNAUTHORIZED"
        
      - code: 1005
        name: "UNAUTHORIZED"
        status: "403 FORBIDDEN"
        
      - code: 400
        name: "INVALID_REQUEST"
        status: "400 BAD_REQUEST"
  
  # Logging
  logging:
    framework: "SLF4J with Logback"
    
    levels:
      - "INFO for normal operations"
      - "WARN for recoverable issues"
      - "ERROR for failures"
      - "DEBUG for development"
      
    format:
      controller: "Log request parameters and results"
      service: "Log important business operations"
      exception: "Log full stack trace for errors"
  
  # Best Practices for Code Generation
  copilot_guidelines:
    - "Follow existing patterns in the codebase"
    - "Match naming conventions and code style"
    - "Add SLF4J logger with appropriate log levels"
    - "Include Jakarta validation (@Valid, @NotBlank, etc.)"
    - "Use custom AppException with ErrorCode"
    - "Add JavaDoc for complex methods"
    - "Never expose entities in controllers, always use DTOs"
    - "Add @PreAuthorize for protected endpoints"
    - "Use Pageable and Page for list endpoints"
    - "Add @Transactional for write operations"
    - "Handle null cases and validation"
    - "Use UUID for all primary keys"
    - "Use Instant for timestamps"
    - "Store enums as STRING"
    - "Be careful with lazy loading outside transactions"
  
  # Future Enhancements
  roadmap:
    - "Add Swagger/OpenAPI documentation"
    - "Implement rate limiting"
    - "Add caching layer (Redis)"
    - "Set up CI/CD pipeline (GitHub Actions)"
    - "Add Docker support"
    - "Implement WebSocket for real-time updates"
    - "Add file upload for QR codes"
    - "Implement audit logging"
    - "Add metrics and monitoring (Actuator, Prometheus)"
    - "Implement API versioning (/api/v1)"
  
  # Metadata
  metadata:
    last_updated: "2025-10-21"
    maintained_by: "HillDevil Development Team"
    documentation: "See README.md and .github/copilot-instructions.md"